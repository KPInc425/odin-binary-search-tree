(()=>{const o=o=>({root:o,leftNode:null,rightNode:null}),l=e=>{let t=e.length,r=Math.floor(t/2);if(r<0&&(r=0),0==t)return null;let n=o(e[r]),u=e.slice(0,r);n.leftNode=l(u);let g=e.slice(r+1,t);return n.rightNode=l(g),n},e=(l,t)=>{let r=l;return null===l?o(t):(t<r.root?r.leftNode=e(r.leftNode,t):r.rightNode=e(r.rightNode,t),l)},t=(o,l)=>{let e=[];if(null===o)return null;const t=(o,l)=>{o&&(e[l]?e[l].push(o.root):e[l]=[o.root],t(o.leftNode,l+1),t(o.rightNode,l+1))};if(t(o,0),!l)return e;l()},r=(o,l)=>{let e=[];if(null===o)return null;const t=o=>{if(!o)return null;console.log(o.root),e.push(o.root),l&&l(o.root),t(o.leftNode),t(o.rightNode)};return t(o),e},n=(o,l)=>{let e=[];if(null===o)return null;const t=o=>{if(!o)return null;t(o.leftNode),console.log(o.root),e.push(o.root),l&&l(o.root),t(o.rightNode)};return t(o),e},u=(o,l)=>{let e=[];if(null===o)return null;const t=o=>{if(!o)return null;t(o.leftNode),t(o.rightNode),console.log(o.root),e.push(o.root),l&&l(o.root)};return t(o),e},g=o=>{if(!o)return null;let l=f(o.leftNode)-f(o.rightNode);return l<0&&(l*=-1),!(l>1||(g(o.leftNode),g(o.rightNode),0))},s=o=>{if(!o)return null;let e=n(o);return l(e)},f=o=>{if(!o)return null;const l=(o,e)=>{if(!o)return e;e++;let t=l(o.leftNode,e),r=l(o.rightNode,e);return t>r?t:r};return l(o,0)},c=(o,l="",e=!0)=>{null!==o.rightNode&&c(o.rightNode,`${l}${e?"│   ":"    "}`,!1),console.log(`${l}${e?"└── ":"┌── "}${o.root}`),null!==o.leftNode&&c(o.leftNode,`${l}${e?"    ":"│   "}`,!0)};(()=>{let o=((o,l)=>{l=l||5e3;let e=[];for(let t=0;t<o;t++){let o=Math.floor(Math.random()*l);e.push(o)}return e})(13);console.log(o);let f=l(o);c(f);let i=g(f);console.log(i),i?(console.log(t(f)),console.log(r(f)),console.log(u(f)),console.log(n(f))):(s(f),console.log(t(f)),console.log(r(f)),console.log(u(f)),console.log(n(f)));for(let o=1;o<10;o++)e(f,123*o);c(f),i=g(f),console.log(i),i||(f=s(f)),i=g(f),console.log(i),c(f),console.log(i),console.log(t(f)),console.log(r(f)),console.log(u(f)),console.log(n(f))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,